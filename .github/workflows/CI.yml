name: CI

on:
  pull_request:
    branches: [master, nightly]
    types: [opened, synchronize, edited, reopened]
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  windows:
    name: "Windows"
    runs-on: windows-latest
    timeout-minutes: 90
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Checkout media-autobuild_suite
        uses: actions/checkout@v3
        with:
          repository: m-ab-s/media-autobuild_suite
          path: media-autobuild_suite

      - name: Cache msys64
        id: cache-msys64
        uses: actions/cache@v2
        with:
          path: media-autobuild_suite/msys64
          key: ffmpeg-msys64

      - name: Copy sunshine-prebuilt config files
        shell: pwsh
        run: cp build/*.* media-autobuild_suite/build/

      - name: Patch bash scripts
        shell: pwsh
        working-directory: media-autobuild_suite
        run: |
          sed -i 's/do_prompt /echo /g' build/media-suite_helper.sh build/media-suite_compile.sh
          sed -i 's/read.*yn/yn=y/g' build/media-suite_update.sh

      - name: Compile the suite
        shell: cmd
        working-directory: media-autobuild_suite
        run: media-autobuild_suite.bat

      - name: Create pre-compiled artifact
        shell: cmd
        run: scripts\create-pre-compiled.bat

      - name: Upload Artifacts
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v2
        with:
          name: pre-compiled-windows
          path: pre-compiled/

      - name: Create pre-compiled-windows.zip
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        shell: pwsh
        run: Compress-Archive -Path pre-compiled\* -DestinationPath pre-compiled-windows.zip

      - name: Create/Update GitHub Release
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: ncipollo/release-action@v1  # https://github.com/ncipollo/release-action
        with:
          name: v1
          tag: v1
          artifacts: pre-compiled-windows.zip
          artifactContentType: application/zip
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          body: |
            Prebuilt ffmpeg libs for sunshine

  linux:
    name: "Linux"
    runs-on: ubuntu-20.04
    # https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Dependencies
        run: |
          sudo apt-get update -qq && sudo apt-get -y install \
            autoconf \
            automake \
            build-essential \
            cmake \
            git-core \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libmp3lame-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            meson \
            ninja-build \
            pkg-config \
            texinfo \
            wget \
            yasm \
            zlib1g-dev

          # NASM
          sudo apt-get install nasm

          # libopus
          sudo apt-get install libopus-dev

          # libx264... build from source to enable static library
          # sudo apt-get install libx264-dev

          # libx265... build from source to enable static library
          # sudo apt-get install libx265-dev libnuma-dev

      - name: Compile NVENC
        # https://trac.ffmpeg.org/wiki/HWAccelIntro#NVENC
        run: |
          git clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git
          cd nv-codec-headers
          make -j$(nproc)
          sudo make install

      - name: Build
        run: |
          mkdir -p ~/ffmpeg_sources ~/bin

          # libx264
          cd ~/ffmpeg_sources && \
          git -C x264 pull 2> /dev/null || git clone --depth 1 https://code.videolan.org/videolan/x264.git && \
          cd x264 && \
          PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure --prefix="$HOME/ffmpeg_build" --bindir="$HOME/bin" --enable-static --enable-pic && \
          PATH="$HOME/bin:$PATH" make -j$(nproc) && \
          make install

          # libx265
          # sudo apt-get install libnuma-dev && \
          cd ~/ffmpeg_sources && \
          wget -O x265.tar.bz2 https://bitbucket.org/multicoreware/x265_git/get/master.tar.bz2 && \
          tar xjvf x265.tar.bz2 && \
          cd multicoreware*/build/linux && \
          PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$HOME/ffmpeg_build" -DENABLE_SHARED=off ../../source && \
          PATH="$HOME/bin:$PATH" make -j$(nproc) && \
          make install

          # ffmpeg
          cd ~/ffmpeg_sources && \
          wget -O ffmpeg-snapshot.tar.bz2 https://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2 && \
          tar xjvf ffmpeg-snapshot.tar.bz2 && \
          cd ffmpeg && \
          PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure \
            --prefix="$HOME/ffmpeg_build" \
            --pkg-config-flags="--static" \
            --extra-cflags="-I$HOME/ffmpeg_build/include" \
            --extra-ldflags="-L$HOME/ffmpeg_build/lib" \
            --extra-libs="-lpthread -lm" \
            --ld="g++" \
            --bindir="$HOME/bin" \
            --disable-autodetect \
            --enable-gpl \
            --enable-bzlib \
            --enable-cuvid \
            --enable-lzma \
            --enable-nvenc \
            --enable-zlib \
            --enable-ffnvcodec \
            --enable-nvdec \
            --enable-vaapi \
            --enable-libopus \
            --enable-libx264 \
            --enable-libx265 \
            --disable-debug \
            && \
          PATH="$HOME/bin:$PATH" make -j$(nproc) && \
          make install && \
          hash -r

      - name: Upload Artifacts
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v2
        with:
          name: pre-compiled-debian
          path: |
            ~/ffmpeg_build/include/
            ~/ffmpeg_build/lib/

      - name: Create pre-compiled-debian.zip
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: 7z a pre-compiled-debian.zip ~/ffmpeg_build/include ~/ffmpeg_build/lib

      - name: Create/Update GitHub Release
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: ncipollo/release-action@v1  # https://github.com/ncipollo/release-action
        with:
          name: v1
          tag: v1
          artifacts: pre-compiled-debian.zip
          artifactContentType: application/zip
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          body: |
            Prebuilt ffmpeg libs for sunshine

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        # https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary#Update-the-Architecture-List-of-Custom-Makefiles
        target:
          - x86_64-apple-macos10.9
          - arm64-apple-macos11
    env:
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: brew install yasm
      - name: Build
        run: ./build-macos.sh
      - name: Archive artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ffmpeg-${{ matrix.target }}
          path: artifacts/
